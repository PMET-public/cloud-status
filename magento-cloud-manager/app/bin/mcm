#!/usr/bin/env node

const yargs = require('yargs')
const colors = require('colors')
const {logger} = require('../src/common')
const {updateHost, updateHostsUsingAllProjects, updateHostsUsingSampleProjects, updateProjectHostRelationships} = require('../src/host')
const {updateProject, updateProjects} = require('../src/project')
const {deleteInactiveEnvironments} = require('../src/environment')
const {updateApplicationState, updateAllApplicationsStates} = require('../src/application-state')
const {searchActivitiesForFailures} = require('../src/activity')

yargs
  .usage('$0 <cmd> [args]')
  .wrap(yargs.terminalWidth())
  .alias('h', 'help')
  .demandCommand(1, `${colors.bgRed(colors.white('  Please provide at least 1 command.  '))}`)
  .check(function (arg) {
    if (arg.verbose) {
      logger.remove(logger.simpleConsole).add(logger.verboseConsole)
    }
    return true
  }, true)
  .option('v', {
    alias: 'verbose',
    global: true,
    type: 'boolean'
  })
  .option('a', {
    alias: 'all',
    description: 'If relevant, apply the command to all hosts, projects, or environments, etc.',
    global: true,
    type: 'boolean'
  })

yargs
  .command(
    ['host:update [pids...]', 'hu'],
    'Update DB with info about hosts for provided projects',
    yargs => {
      yargs.positional('pids', {
        type: 'string',
        describe: 'List of project IDs'
      })
    },
    argv => {
      if (argv.all) {
        updateHostsUsingAllProjects();
      } else {
        argv.pids.forEach(pid => updateHost(pid))
      }
    }
  )

yargs
  .command(
    ['host:sample', 'hs'],
    'Update DB with info about hosts using 1 proj per host sample',
    () => {},
    argv => updateHostsUsingSampleProjects()
  )


yargs
  .command(
    ['host:project-match', 'hp'],
    'Update DB matching hosts and projects',
    () => {},
    argv => updateProjectHostRelationships()
  )

yargs
  .command(
    ['project:update [pids...]', 'pu'],
    'Update DB with info about provided projects',
    yargs => {
      yargs.positional('pids', {
        type: 'string',
        describe: 'List of project IDs'
      })
    },
    argv => {
      if (argv.all) {
        updateProjects()
      } else {
        argv.pids.forEach(pid => updateProject(pid))
      }
    }
  )

yargs
  .command(
    ['app:update <pid> [env]', 'au'],
    'Update DB with info about deployed app',
    yargs => {
      yargs.positional('pid', {
        type: 'string',
        describe: 'The project ID'
      })
      yargs.positional('env', {
        type: 'string',
        describe: 'The environment ID'
      })
    },
    argv => {
      if (argv.all) {
        updateAllApplicationsStates()
      } else {
        updateApplicationState(argv.pid, argv.env ? argv.env : 'master')
      }
    }
  )

yargs
  .command(
    ['env:delete-inactive', 'ed'],
    'Delete ALL inactive environments across ALL projects',
    () => {},
    argv => deleteInactiveEnvironments()
  )

yargs
  .command(
    ['activity:find-failures', 'af'],
    'Update envs in DB that failed to deploy',
    () => {},
    argv => searchActivitiesForFailures()
  )

yargs.argv
